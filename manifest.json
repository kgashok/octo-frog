{"hiker.tests.c":"#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n  //assert(answer() == 42);\n  //assert (answer(3) == \"Fizz\");\n    assert (strcmp(answer(3), \"Fizz\") == 0);\n\n    assert (strcmp(answer(5), \"Buzz\") == 0);\n\n    assert (strcmp(answer(15), \"FizzBuzz\") == 0);\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    // green-traffic light pattern...\n    puts(\"All tests passed\");\n}\n","hiker.c":"#include \"hiker.h\"\n\n#include <stdio.h>\n\nstatic char buf[30];\n\nchar* answer(int val)\n{\n    if (val % 3 == 0)\n        return \"Fizz\";\n    if (val % 5 == 0)\n        return \"Buzz\";\n\n    sprintf(buf, \"%d\", val);\n    return buf;    \n    \n    \n}\n\n/*\nint answer(void)\n{\n    return 6 * 9;\n}\n\n*/","hiker.h":"#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\n//int answer(void);\nchar* answer(int);\n\n\n#endif\n","makefile":"CFLAGS += -I. -std=c99 -Wall -Wextra -Werror \\\n\t-Wstrict-prototypes -Wmissing-prototypes \\\n\t-Wshadow -Wfloat-equal -O\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\n\n\n.PHONY: test.output\ntest.output: test makefile\n\t./$<\n\ntest: makefile $(C_FILES) $(COMPILED_H_FILES)\n\t@gcc $(CFLAGS) $(C_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .c files which are not #included).\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<","cyber-dojo.sh":"make --always-make\n","output":"./test\ntest: hiker.tests.c:14: life_the_universe_and_everything: Assertion `__extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (answer(15)) && __builtin_constant_p (\"FizzBuzz\") && (__s1_len = __builtin_strlen (answer(15)), __s2_len = __builtin_strlen (\"FizzBuzz\"), (!((size_t)(const void *)((answer(15)) + 1) - (size_t)(const void *)(answer(15)) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"FizzBuzz\") + 1) - (size_t)(const void *)(\"FizzBuzz\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (answer(15), \"FizzBuzz\") : (__builtin_constant_p (answer(15)) && ((size_t)(const void *)((answer(15)) + 1) - (size_t)(const void *)(answer(15)) == 1) && (__s1_len = __builtin_strlen (answer(15)), __s1_len < 4) ? (__builtin_constant_p (\"FizzBuzz\") && ((size_t)(const void *)((\"FizzBuzz\") + 1) - (size_t)(const void *)(\"FizzBuzz\") == 1) ? __builtin_strcmp (answer(15), \"FizzBuzz\") : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (\"FizzBuzz\"); register int __result = (((const unsigned char *) (const char *) (answer(15)))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (answer(15)))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (answer(15)))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (answer(15)))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"FizzBuzz\") && ((size_t)(const void *)((\"FizzBuzz\") + 1) - (size_t)(const void *)(\"FizzBuzz\") == 1) && (__s2_len = __builtin_strlen (\"FizzBuzz\"), __s2_len < 4) ? (__builtin_constant_p (answer(15)) && ((size_t)(const void *)((answer(15)) + 1) - (size_t)(const void *)(answer(15)) == 1) ? __builtin_strcmp (answer(15), \"FizzBuzz\") : (__extension__ ({ const unsigned char *__s1 = (const unsigned char *) (const char *) (answer(15)); register int __result = __s1[0] - ((const unsigned char *) (const char *) (\"FizzBuzz\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((const unsigned char *) (const char *) (\"FizzBuzz\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((const unsigned char *) (const char *) (\"FizzBuzz\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((const unsigned char *) (const char *) (\"FizzBuzz\"))[3]); } } __result; }))) : __builtin_strcmp (answer(15), \"FizzBuzz\")))); }) == 0' failed.\nmake: *** [test.output] Aborted\n","instructions":"Note: The initial code and test files form a\nsimple example to start you off.\nThey are *not* related to the chosen exercise,\nwhose instructions now follow...\n- - - - - - - - - - - - - - - - - - - - - - -\nWrite a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n"}