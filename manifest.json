{"hiker.tests.c":"#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n  //assert(answer() == 42);\n  //assert (answer(3) == \"Fizz\");\n    assert (strcmp(answer(3), \"Fizz\") == 0);\n\n    assert (strcmp(answer(5), \"Buzz\") == 0);\n\n    //assert (strcmp(answer(15), \"FizzBuzz\") == 0);\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    // green-traffic light pattern...\n    puts(\"All tests passed\");\n}\n","hiker.c":"#include \"hiker.h\"\n\n#include <stdio.h>\n#include <string.h>\n\nstatic char buf[30];\n\nchar* answer(int val)\n{\n    memset(buf,0,sizeof(buf));\n\n    if (val % 3 == 0){\n        strcpy(buf, \"Fizz\");\n        // return \"Fizz\";\n    }\n    if (val % 5 == 0) {\n        strcat(buf, \"Buzz\");\n        //return \"Buzz\";\n    }\n    if (val % 3 != 0 && val % 5 != 0)\n        sprintf(buf, \"%d\", val);\n\n    printf (\"%s\\n\", buf);\n    return buf;\n    \n    \n}\n\n/*\nint answer(void)\n{\n    return 6 * 9;\n}\n\n*/","hiker.h":"#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\n//int answer(void);\nchar* answer(int);\n\n\n#endif\n","makefile":"CFLAGS += -I. -std=c99 -Wall -Wextra -Werror \\\n\t-Wstrict-prototypes -Wmissing-prototypes \\\n\t-Wshadow -Wfloat-equal -O\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\n\n\n.PHONY: test.output\ntest.output: test makefile\n\t./$<\n\ntest: makefile $(C_FILES) $(COMPILED_H_FILES)\n\t@gcc $(CFLAGS) $(C_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .c files which are not #included).\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<","cyber-dojo.sh":"make --always-make\n","output":"./test\nFizz\nBuzz\nAll tests passed\n","instructions":"Note: The initial code and test files form a\nsimple example to start you off.\nThey are *not* related to the chosen exercise,\nwhose instructions now follow...\n- - - - - - - - - - - - - - - - - - - - - - -\nWrite a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n"}