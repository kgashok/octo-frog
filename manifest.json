{"makefile":"CFLAGS += -I. -std=c99 -Wall -Wextra -Werror \\\n\t-Wstrict-prototypes -Wmissing-prototypes \\\n\t-Wshadow -Wfloat-equal -O\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\n\n\n.PHONY: test.output\ntest.output: test makefile\n\t./$<\n\ntest: makefile $(C_FILES) $(COMPILED_H_FILES)\n\t@gcc $(CFLAGS) $(C_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .c files which are not #included).\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<","cyber-dojo.sh":"make --always-make\n","output":"./test\n*** buffer overflow detected ***: ./test terminated\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(__fortify_fail+0x5c)[0x2b3d7c39f08c]\n/lib/x86_64-linux-gnu/libc.so.6(+0x111020)[0x2b3d7c39e020]\n/lib/x86_64-linux-gnu/libc.so.6(+0x10ff05)[0x2b3d7c39cf05]\n./test[0x40075b]\n./test[0x400844]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5)[0x2b3d7c2aede5]\n./test[0x400579]\n======= Memory map: ========\n00400000-00403000 r-xp 00000000 ca:01 2786578                            /sandbox/test\n00603000-00604000 r--p 00003000 ca:01 2786578                            /sandbox/test\n00604000-00605000 rw-p 00004000 ca:01 2786578                            /sandbox/test\n01796000-017b7000 rw-p 00000000 00:00 0                                  [heap]\n2b3d7c068000-2b3d7c08b000 r-xp 00000000 ca:01 796013                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/ld-2.17.so\n2b3d7c08b000-2b3d7c08e000 rw-p 00000000 00:00 0 \n2b3d7c28a000-2b3d7c28b000 r--p 00022000 ca:01 796013                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/ld-2.17.so\n2b3d7c28b000-2b3d7c28d000 rw-p 00023000 ca:01 796013                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/ld-2.17.so\n2b3d7c28d000-2b3d7c44a000 r-xp 00000000 ca:01 795929                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libc-2.17.so\n2b3d7c44a000-2b3d7c64a000 ---p 001bd000 ca:01 795929                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libc-2.17.so\n2b3d7c64a000-2b3d7c64e000 r--p 001bd000 ca:01 795929                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libc-2.17.so\n2b3d7c64e000-2b3d7c650000 rw-p 001c1000 ca:01 795929                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libc-2.17.so\n2b3d7c650000-2b3d7c658000 rw-p 00000000 00:00 0 \n2b3d7c658000-2b3d7c66d000 r-xp 00000000 ca:01 795952                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libgcc_s.so.1\n2b3d7c66d000-2b3d7c86c000 ---p 00015000 ca:01 795952                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libgcc_s.so.1\n2b3d7c86c000-2b3d7c86d000 r--p 00014000 ca:01 795952                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libgcc_s.so.1\n2b3d7c86d000-2b3d7c86e000 rw-p 00015000 ca:01 795952                     /var/lib/docker/aufs/diff/9f676bd305a43a931a8d98b13e5840ffbebcd908370765373315926024c7c35e/lib/x86_64-linux-gnu/libgcc_s.so.1\n7fff4b06f000-7fff4b090000 rw-p 00000000 00:00 0                          [stack]\n7fff4b143000-7fff4b144000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\nmake: *** [test.output] Aborted\n","instructions":"Note: The initial code and test files form a\nsimple example to start you off.\nThey are *not* related to the chosen exercise,\nwhose instructions now follow...\n- - - - - - - - - - - - - - - - - - - - - - -\nWrite a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n","fizzbuzz.h":"#ifndef FIZZ_INCLUDED\n#define FIZZ_INCLUDED\n\n//int answer(void);\nchar* fizzBuzz(int);\nchar* fizzBuzzSeq(int);\n\n#endif\n","fizzbuzz.c":"#include \"fizzbuzz.h\"\n\n#include <stdio.h>\n#include <string.h>\n\nstatic char buf[30];\n\nchar* fizzBuzz(int val)\n{\n    // initialize static variable, it may contain something!\n    memset(buf,0,sizeof(buf));\n\n    if (val % 3 == 0)\n        strcat(buf, \"Fizz\");\n    if (val % 5 == 0) \n        strcat(buf, \"Buzz\");\n    if (strlen(buf) == 0)\n        sprintf(buf, \"%d\", val);\n\n    return buf;\n     \n}\n\nstatic char sbuf[1000];\n\nchar* fizzBuzzSeq(int val)\n{\n    memset(sbuf, 0, sizeof(buf));\n    //printf (\"%d\", val);\n\n    for (int i = 0; i < val; i++) {\n        strcat(buf, fizzBuzz(i));\n        strcat(buf, \", \");\n    }\n\n    return sbuf;\n}\n\n","fizzbuzz_tests.c":"#include \"fizzbuzz.h\"\n#include <assert.h>\n#include <stdio.h>\n#include <string.h>\n\nstatic void fizzbuzzTests(void)\n{\n    assert (strcmp(fizzBuzz(3),  \"Fizz\")     == 0);\n    assert (strcmp(fizzBuzz(5),  \"Buzz\")     == 0);\n    assert (strcmp(fizzBuzz(15), \"FizzBuzz\") == 0);\n\n    assert (strcmp(fizzBuzzSeq(3), \"1, 2, Fizz\") == 0);\n\n}\n\nint main(void)\n{\n    fizzbuzzTests();\n    // green-traffic light pattern...\n    puts(\"All tests passed\");\n}\n"}