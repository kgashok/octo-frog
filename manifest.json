{"hiker.tests.c":"#include \"hiker.h\"\n#include <assert.h>\n#include <stdio.h>\n\nstatic void life_the_universe_and_everything(void)\n{\n  //assert(answer() == 42);\n    assert (answer(3) == \"Fizz\");\n\n}\n\nint main(void)\n{\n    life_the_universe_and_everything();\n    // green-traffic light pattern...\n    puts(\"All tests passed\");\n}\n","hiker.c":"#include \"hiker.h\"\n\n#include <stdio.h>\n\nstatic buf[30];\n\nchar* answer(int val)\n{\n    if (val % 3 == 0)\n        return \"Fizz\";\n\n    sprintf(buf, \"%d\", val);\n    return buf;    \n    \n    \n}\n\n/*\nint answer(void)\n{\n    return 6 * 9;\n}\n\n*/","hiker.h":"#ifndef HIKER_INCLUDED\n#define HIKER_INCLUDED\n\n//int answer(void);\nchar* answer(int);\n\n\n#endif\n","makefile":"CFLAGS += -I. -std=c99 -Wall -Wextra -Werror \\\n\t-Wstrict-prototypes -Wmissing-prototypes \\\n\t-Wshadow -Wfloat-equal -O\n\nH_FILES = $(wildcard *.h)\nCOMPILED_H_FILES = $(patsubst %.h,%.compiled_h,$(H_FILES))\nC_FILES = $(wildcard *.c)\n\n\n.PHONY: test.output\ntest.output: test makefile\n\t./$<\n\ntest: makefile $(C_FILES) $(COMPILED_H_FILES)\n\t@gcc $(CFLAGS) $(C_FILES) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .c files which are not #included).\n\n%.compiled_h: %.h\n\t@gcc -x c $(CFLAGS) -c -o $@ $<","cyber-dojo.sh":"make --always-make\n","output":"hiker.c:5:8: error: type defaults to 'int' in declaration of 'buf' [-Werror]\n static buf[30];\n        ^\nhiker.c: In function 'answer':\nhiker.c:12:5: error: passing argument 1 of 'sprintf' from incompatible pointer type [-Werror]\n     sprintf(buf, \"%d\", val);\n     ^\nIn file included from /usr/include/features.h:371:0,\n                 from /usr/include/stdio.h:27,\n                 from hiker.c:3:\n/usr/include/x86_64-linux-gnu/bits/stdio2.h:31:1: note: expected 'char * restrict' but argument is of type 'int *'\n __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))\n ^\nhiker.c:13:5: error: return from incompatible pointer type [-Werror]\n     return buf;    \n     ^\ncc1: all warnings being treated as errors\nIn file included from hiker.tests.c:2:0:\nhiker.tests.c: In function 'life_the_universe_and_everything':\nhiker.tests.c:8:23: error: comparison with string literal results in unspecified behavior [-Werror=address]\n     assert (answer(3) == \"Fizz\");\n                       ^\ncc1: all warnings being treated as errors\nmake: *** [test] Error 1\n","instructions":"Note: The initial code and test files form a\nsimple example to start you off.\nThey are *not* related to the chosen exercise,\nwhose instructions now follow...\n- - - - - - - - - - - - - - - - - - - - - - -\nWrite a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n"}